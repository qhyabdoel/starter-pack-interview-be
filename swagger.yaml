openapi: 3.0.0
info:
  title: Node.js API
  description: API documentation for the Node.js application
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: integer

    Task:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        status:
          type: string

    Auth:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: "demo@minimals.cc"
        password: "@demo1"

security:
  - bearerAuth: []

paths:
  /api/auth/sign-in:
    post:
      summary: Sign in
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Auth"
      responses:
        "200":
          description: Login succed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  accessToken:
                    type: string
  /api/auth/me:
    get:
      summary: Get login user data
      tags:
        - Auth
      responses:
        "200":
          description: Get user profile succed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    type: object

  /api/tasks:
    get:
      summary: Get all tasks
      tags:
        - Tasks
      responses:
        "200":
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
    post:
      summary: Create a new task
      tags:
        - Tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        "201":
          description: Task created
  /api/tasks/{id}:
    get:
      summary: Get a task by ID
      tags:
        - Tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Task details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
    put:
      summary: Update a task by ID
      tags:
        - Tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        "200":
          description: Task updated
    delete:
      summary: Delete a task by ID
      tags:
        - Tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Task deleted

  /api/products:
    get:
      summary: Get all producs
      tags:
        - Product
      responses:
        "200":
          description: A list of producs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
    post:
      summary: Create a new produc
      tags:
        - Product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "201":
          description: Task created
  /api/products/{id}:
    get:
      summary: Get a produc by ID
      tags:
        - Product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Product details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
    put:
      summary: Update a produc by ID
      tags:
        - Product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: Product updated
    delete:
      summary: Delete a produc by ID
      tags:
        - Product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Product deleted

  /api/notes:
    get:
      summary: Get all notes
      tags:
        - Notes
      responses:
        "200":
          description: A list of notes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
    post:
      summary: Create a new note
      tags:
        - Notes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        "201":
          description: Note created
  /api/notes/{id}:
    get:
      summary: Get a note by ID
      tags:
        - Notes
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Note details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
    put:
      summary: Update a produc by ID
      tags:
        - Notes
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        "200":
          description: Product updated
    delete:
      summary: Delete a note by ID
      tags:
        - Notes
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Note deleted
